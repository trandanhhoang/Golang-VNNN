// Code generated by protoc-gen-go. DO NOT EDIT.
// source: userService.proto

package userservice

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TokenRequest struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenRequest) Reset()         { *m = TokenRequest{} }
func (m *TokenRequest) String() string { return proto.CompactTextString(m) }
func (*TokenRequest) ProtoMessage()    {}
func (*TokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_874b4b11a4ddc7c4, []int{0}
}

func (m *TokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenRequest.Unmarshal(m, b)
}
func (m *TokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenRequest.Marshal(b, m, deterministic)
}
func (m *TokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenRequest.Merge(m, src)
}
func (m *TokenRequest) XXX_Size() int {
	return xxx_messageInfo_TokenRequest.Size(m)
}
func (m *TokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TokenRequest proto.InternalMessageInfo

func (m *TokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type BaseRespond struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BaseRespond) Reset()         { *m = BaseRespond{} }
func (m *BaseRespond) String() string { return proto.CompactTextString(m) }
func (*BaseRespond) ProtoMessage()    {}
func (*BaseRespond) Descriptor() ([]byte, []int) {
	return fileDescriptor_874b4b11a4ddc7c4, []int{1}
}

func (m *BaseRespond) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BaseRespond.Unmarshal(m, b)
}
func (m *BaseRespond) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BaseRespond.Marshal(b, m, deterministic)
}
func (m *BaseRespond) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseRespond.Merge(m, src)
}
func (m *BaseRespond) XXX_Size() int {
	return xxx_messageInfo_BaseRespond.Size(m)
}
func (m *BaseRespond) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseRespond.DiscardUnknown(m)
}

var xxx_messageInfo_BaseRespond proto.InternalMessageInfo

func (m *BaseRespond) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*TokenRequest)(nil), "userservice.TokenRequest")
	proto.RegisterType((*BaseRespond)(nil), "userservice.BaseRespond")
}

func init() { proto.RegisterFile("userService.proto", fileDescriptor_874b4b11a4ddc7c4) }

var fileDescriptor_874b4b11a4ddc7c4 = []byte{
	// 158 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x2d, 0x4e, 0x2d,
	0x0a, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x06,
	0x09, 0x15, 0x43, 0x84, 0x94, 0x54, 0xb8, 0x78, 0x42, 0xf2, 0xb3, 0x53, 0xf3, 0x82, 0x52, 0x0b,
	0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x44, 0xb8, 0x58, 0x4b, 0x40, 0x7c, 0x09, 0x46, 0x05, 0x46, 0x0d,
	0xce, 0x20, 0x08, 0x47, 0x49, 0x9d, 0x8b, 0xdb, 0x29, 0xb1, 0x38, 0x35, 0x28, 0xb5, 0xb8, 0x20,
	0x3f, 0x2f, 0x45, 0x48, 0x82, 0x8b, 0xbd, 0xb8, 0x34, 0x39, 0x39, 0xb5, 0xb8, 0x18, 0xac, 0x8c,
	0x23, 0x08, 0xc6, 0x35, 0x8a, 0xe4, 0xe2, 0x0e, 0x45, 0x58, 0x28, 0xe4, 0xc5, 0x25, 0x18, 0x96,
	0x5a, 0x94, 0x99, 0x56, 0x09, 0x12, 0x74, 0xaa, 0x04, 0xdb, 0x24, 0x24, 0xa9, 0x87, 0xe4, 0x00,
	0x3d, 0x64, 0xdb, 0xa5, 0x24, 0x50, 0xa4, 0x90, 0xac, 0x54, 0x62, 0x48, 0x62, 0x03, 0xbb, 0xde,
	0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x8d, 0xf0, 0x7d, 0x31, 0xd2, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	VerifyUserByToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*BaseRespond, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) VerifyUserByToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*BaseRespond, error) {
	out := new(BaseRespond)
	err := c.cc.Invoke(ctx, "/userservice.UserService/VerifyUserByToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	VerifyUserByToken(context.Context, *TokenRequest) (*BaseRespond, error)
}

// UnimplementedUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (*UnimplementedUserServiceServer) VerifyUserByToken(ctx context.Context, req *TokenRequest) (*BaseRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyUserByToken not implemented")
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_VerifyUserByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerifyUserByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userservice.UserService/VerifyUserByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerifyUserByToken(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "userservice.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyUserByToken",
			Handler:    _UserService_VerifyUserByToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userService.proto",
}
