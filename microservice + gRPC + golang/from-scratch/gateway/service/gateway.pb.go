// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gateway.proto

package service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SaveOrderResquest struct {
	Order                []byte   `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SaveOrderResquest) Reset()         { *m = SaveOrderResquest{} }
func (m *SaveOrderResquest) String() string { return proto.CompactTextString(m) }
func (*SaveOrderResquest) ProtoMessage()    {}
func (*SaveOrderResquest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1a937782ebbded5, []int{0}
}

func (m *SaveOrderResquest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaveOrderResquest.Unmarshal(m, b)
}
func (m *SaveOrderResquest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaveOrderResquest.Marshal(b, m, deterministic)
}
func (m *SaveOrderResquest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveOrderResquest.Merge(m, src)
}
func (m *SaveOrderResquest) XXX_Size() int {
	return xxx_messageInfo_SaveOrderResquest.Size(m)
}
func (m *SaveOrderResquest) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveOrderResquest.DiscardUnknown(m)
}

var xxx_messageInfo_SaveOrderResquest proto.InternalMessageInfo

func (m *SaveOrderResquest) GetOrder() []byte {
	if m != nil {
		return m.Order
	}
	return nil
}

type ProductResquest struct {
	Products             []byte   `protobuf:"bytes,1,opt,name=products,proto3" json:"products,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProductResquest) Reset()         { *m = ProductResquest{} }
func (m *ProductResquest) String() string { return proto.CompactTextString(m) }
func (*ProductResquest) ProtoMessage()    {}
func (*ProductResquest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1a937782ebbded5, []int{1}
}

func (m *ProductResquest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProductResquest.Unmarshal(m, b)
}
func (m *ProductResquest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProductResquest.Marshal(b, m, deterministic)
}
func (m *ProductResquest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductResquest.Merge(m, src)
}
func (m *ProductResquest) XXX_Size() int {
	return xxx_messageInfo_ProductResquest.Size(m)
}
func (m *ProductResquest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductResquest.DiscardUnknown(m)
}

var xxx_messageInfo_ProductResquest proto.InternalMessageInfo

func (m *ProductResquest) GetProducts() []byte {
	if m != nil {
		return m.Products
	}
	return nil
}

type TokenRequest struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenRequest) Reset()         { *m = TokenRequest{} }
func (m *TokenRequest) String() string { return proto.CompactTextString(m) }
func (*TokenRequest) ProtoMessage()    {}
func (*TokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1a937782ebbded5, []int{2}
}

func (m *TokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenRequest.Unmarshal(m, b)
}
func (m *TokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenRequest.Marshal(b, m, deterministic)
}
func (m *TokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenRequest.Merge(m, src)
}
func (m *TokenRequest) XXX_Size() int {
	return xxx_messageInfo_TokenRequest.Size(m)
}
func (m *TokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TokenRequest proto.InternalMessageInfo

func (m *TokenRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type BaseRespond struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BaseRespond) Reset()         { *m = BaseRespond{} }
func (m *BaseRespond) String() string { return proto.CompactTextString(m) }
func (*BaseRespond) ProtoMessage()    {}
func (*BaseRespond) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1a937782ebbded5, []int{3}
}

func (m *BaseRespond) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BaseRespond.Unmarshal(m, b)
}
func (m *BaseRespond) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BaseRespond.Marshal(b, m, deterministic)
}
func (m *BaseRespond) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseRespond.Merge(m, src)
}
func (m *BaseRespond) XXX_Size() int {
	return xxx_messageInfo_BaseRespond.Size(m)
}
func (m *BaseRespond) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseRespond.DiscardUnknown(m)
}

var xxx_messageInfo_BaseRespond proto.InternalMessageInfo

func (m *BaseRespond) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*SaveOrderResquest)(nil), "service.SaveOrderResquest")
	proto.RegisterType((*ProductResquest)(nil), "service.ProductResquest")
	proto.RegisterType((*TokenRequest)(nil), "service.TokenRequest")
	proto.RegisterType((*BaseRespond)(nil), "service.BaseRespond")
}

func init() { proto.RegisterFile("gateway.proto", fileDescriptor_f1a937782ebbded5) }

var fileDescriptor_f1a937782ebbded5 = []byte{
	// 263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0xc6, 0xdd, 0x41, 0xb7, 0xbd, 0x55, 0x74, 0x61, 0x62, 0xe9, 0x49, 0x82, 0xa0, 0x1e, 0xec,
	0x61, 0xfe, 0x01, 0x42, 0x3d, 0x0d, 0x0f, 0xd3, 0x4c, 0xbd, 0x4a, 0x4d, 0x9f, 0x3a, 0x06, 0x49,
	0xcd, 0x4b, 0x2b, 0xfd, 0xef, 0xa5, 0x49, 0x1b, 0x86, 0x63, 0xc7, 0xef, 0xe3, 0xcb, 0xef, 0xcb,
	0x7b, 0x0f, 0x8e, 0xbf, 0x72, 0x8b, 0xbf, 0x79, 0x93, 0x96, 0x46, 0x5b, 0xcd, 0x86, 0x84, 0xa6,
	0x5e, 0x4b, 0xe4, 0x37, 0x30, 0x5d, 0xe5, 0x35, 0x2e, 0x4d, 0x81, 0x46, 0x20, 0xfd, 0x54, 0x48,
	0x96, 0xcd, 0xe0, 0x50, 0xb7, 0x46, 0x3c, 0xb8, 0x18, 0x5c, 0x47, 0xc2, 0x0b, 0x7e, 0x0b, 0x27,
	0x4f, 0x46, 0x17, 0x95, 0xb4, 0x21, 0x98, 0xc0, 0xa8, 0xf4, 0x16, 0x75, 0xd9, 0xa0, 0xf9, 0x25,
	0x44, 0x2f, 0x7a, 0x83, 0x4a, 0x60, 0x80, 0xda, 0x56, 0xbb, 0xe0, 0x58, 0x78, 0xc1, 0xaf, 0x60,
	0x92, 0xe5, 0x84, 0x02, 0xa9, 0xd4, 0xaa, 0x60, 0x31, 0x0c, 0xa9, 0x92, 0x12, 0xc9, 0xf3, 0x46,
	0xa2, 0x97, 0xf3, 0x67, 0x98, 0xbc, 0x12, 0x9a, 0x95, 0xff, 0x37, 0xcb, 0x60, 0xfa, 0x86, 0x66,
	0xfd, 0xd9, 0xb4, 0x66, 0xd6, 0xb8, 0x26, 0x76, 0x96, 0x76, 0x63, 0xa5, 0xdb, 0xcd, 0xc9, 0x2c,
	0xd8, 0x5b, 0x55, 0xfc, 0x60, 0xfe, 0x0e, 0xa7, 0x0b, 0x55, 0xa3, 0xb2, 0xda, 0x34, 0x3d, 0xf7,
	0x11, 0xce, 0x1f, 0xbe, 0x51, 0x6e, 0xba, 0x49, 0x17, 0x2a, 0x24, 0x58, 0x1c, 0x30, 0xff, 0xd6,
	0xb0, 0xb7, 0x60, 0x09, 0x91, 0x5b, 0x6c, 0x0f, 0xbf, 0x87, 0x71, 0x58, 0x36, 0x4b, 0xc2, 0xa3,
	0x9d, 0x03, 0xec, 0x03, 0x7e, 0x1c, 0xb9, 0xeb, 0xdd, 0xfd, 0x05, 0x00, 0x00, 0xff, 0xff, 0x39,
	0x94, 0x8a, 0xa0, 0xce, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	VerifyUserByToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*BaseRespond, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) VerifyUserByToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*BaseRespond, error) {
	out := new(BaseRespond)
	err := c.cc.Invoke(ctx, "/service.UserService/VerifyUserByToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	VerifyUserByToken(context.Context, *TokenRequest) (*BaseRespond, error)
}

// UnimplementedUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (*UnimplementedUserServiceServer) VerifyUserByToken(ctx context.Context, req *TokenRequest) (*BaseRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyUserByToken not implemented")
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_VerifyUserByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerifyUserByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.UserService/VerifyUserByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerifyUserByToken(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyUserByToken",
			Handler:    _UserService_VerifyUserByToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway.proto",
}

// InventoryServiceClient is the client API for InventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InventoryServiceClient interface {
	CheckProductInInventory(ctx context.Context, in *ProductResquest, opts ...grpc.CallOption) (*BaseRespond, error)
}

type inventoryServiceClient struct {
	cc *grpc.ClientConn
}

func NewInventoryServiceClient(cc *grpc.ClientConn) InventoryServiceClient {
	return &inventoryServiceClient{cc}
}

func (c *inventoryServiceClient) CheckProductInInventory(ctx context.Context, in *ProductResquest, opts ...grpc.CallOption) (*BaseRespond, error) {
	out := new(BaseRespond)
	err := c.cc.Invoke(ctx, "/service.InventoryService/CheckProductInInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServiceServer is the server API for InventoryService service.
type InventoryServiceServer interface {
	CheckProductInInventory(context.Context, *ProductResquest) (*BaseRespond, error)
}

// UnimplementedInventoryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedInventoryServiceServer struct {
}

func (*UnimplementedInventoryServiceServer) CheckProductInInventory(ctx context.Context, req *ProductResquest) (*BaseRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckProductInInventory not implemented")
}

func RegisterInventoryServiceServer(s *grpc.Server, srv InventoryServiceServer) {
	s.RegisterService(&_InventoryService_serviceDesc, srv)
}

func _InventoryService_CheckProductInInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductResquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CheckProductInInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.InventoryService/CheckProductInInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CheckProductInInventory(ctx, req.(*ProductResquest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InventoryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.InventoryService",
	HandlerType: (*InventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckProductInInventory",
			Handler:    _InventoryService_CheckProductInInventory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway.proto",
}

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrderServiceClient interface {
	SaveOrder(ctx context.Context, in *SaveOrderResquest, opts ...grpc.CallOption) (*BaseRespond, error)
}

type orderServiceClient struct {
	cc *grpc.ClientConn
}

func NewOrderServiceClient(cc *grpc.ClientConn) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) SaveOrder(ctx context.Context, in *SaveOrderResquest, opts ...grpc.CallOption) (*BaseRespond, error) {
	out := new(BaseRespond)
	err := c.cc.Invoke(ctx, "/service.OrderService/SaveOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
type OrderServiceServer interface {
	SaveOrder(context.Context, *SaveOrderResquest) (*BaseRespond, error)
}

// UnimplementedOrderServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (*UnimplementedOrderServiceServer) SaveOrder(ctx context.Context, req *SaveOrderResquest) (*BaseRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveOrder not implemented")
}

func RegisterOrderServiceServer(s *grpc.Server, srv OrderServiceServer) {
	s.RegisterService(&_OrderService_serviceDesc, srv)
}

func _OrderService_SaveOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveOrderResquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).SaveOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OrderService/SaveOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).SaveOrder(ctx, req.(*SaveOrderResquest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveOrder",
			Handler:    _OrderService_SaveOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway.proto",
}
